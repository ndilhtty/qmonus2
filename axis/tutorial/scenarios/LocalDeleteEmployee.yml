additional_paths: []
category: tutorial
commands:
- command: request_validation
  id: a55ff18ca11a11ec873b76b8097b6fb2
  kwargs:
    aspect_options:
      pre:
        process: local_employee_id = context.resources["local_employee_id"]
    resources:
      $schema: http://json-schema.org/draft-07/schema#
      properties:
        local_employee_id:
          format: regex_hyph_uuid
          type: string
      required:
      - local_employee_id
      type: object
  label: Request Validation
- command: script
  id: a56029fea11a11ec873b76b8097b6fb2
  kwargs:
    code: |-
      try:
          async with model.aiodb() as conn:
              async with conn.begin() as trans:
                  # レコード検索
                  local_employee = await atom.LocalEmployee.load(local_employee_id,
                                                                 conn=conn,
                                                                 for_update=True)
                  if not local_employee:
                      raise Error(404, f"Specified local employee {local_employee_id} not found")

                  local_employee.status = "erasing"

                  # レコード更新
                  faker("localEmployeeSaveFake")
                  await local_employee.save(conn=conn, tran=trans)

          # 応答返却
          res = dict(employee=dict(id=local_employee.id,
                                   name=local_employee.name,
                                   position=local_employee.position,
                                   status=local_employee.status))
          context.session.set_status(202)
          context.session.finish(res)

      except Error as e:
          raise
      except Exception as e:
          raise Error(500, "Internal Server Error")
  label: Update DB Record
- command: script
  id: a56038e0a11a11ec873b76b8097b6fb2
  kwargs:
    code: |-
      faker("sleepFake")
      await asyncio.sleep(10)
  label: Sleep
- command: script
  id: a5604b1ea11a11ec873b76b8097b6fb2
  kwargs:
    code: |-
      async with model.aiodb() as conn:
          async with conn.begin() as trans:
              faker("localEmployeeDestroyFake")
              await local_employee.destroy(conn=conn, tran=trans)
  label: Delete DB Record
connect_timeout: 60
global_variables:
  local_employee:
    description: ''
    initial: null
  local_employee_id:
    description: ''
    initial: null
method: DELETE
name: LocalDeleteEmployee
request_timeout: 60
routing_auto_generation_mode: true
routing_options:
  scope: secure
spec:
  response:
    normal:
      codes:
      - 200
transaction:
  async: true
  auto_begin: true
  auto_response: false
  auto_rollback: true
  enable: true
  lock:
    lock_keys:
    - local_employee_id
    retry_count: 0
    retry_interval: 0
  timeout: 3600
  xdomain: tutorial
  xname: local_employee_id
  xname_use_counter: false
  xtype: local_delete_employee
update: '2022-03-14T15:35:50.776806+09:00'
uri: /local/employees/{local_employee_id}
variable_groups: []
version: 9
